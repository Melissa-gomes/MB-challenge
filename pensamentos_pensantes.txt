Faz sentido uma order fracionada?
sim, mas tipo eu teria que monitorar quanto "sobrou" da order para deixar "em aberto" até finalizar o total do limite da order
e precisa de um limite por que se não um idiota poderia sacanear e comprar infinitos BTs

o mundo de BT parece feroz
será que é por isso que gente que fica acompanhando isso sempre parece tão cansado?

queria colocar aqueles validadores legais de struct do go mas o service
ia parecer tão pobrinho

carai que musica boa, tenho que add NAQUELA pl

tenho que acabar aquele livro dos 100 erros

sera que cabe uma paralelismo ali ou é too much?
penso demais credo

makefilezinho de lei por que ninguem é obrigado 

REGRA DE NEGOCIO DEFINIDA PELAS VOZES DA MINHA MENTE:se a pessoa não intencionar que quer deixar essa order aguardando antes de colocar pra valer ela vai ser criada aberta.

OPEN >> WAITING, SOLD, CANCEL
WAITING >> OPEN, CANCEL
SOLD >> NOT
CANCEL >> NOT


[x] Tests
[x] MakeFile (em andamento)
[] Documentação
[x] Arrumar database.go
[x] melhorar os erros
[x] criar os DTOS 
[x] seeders

ROTAS:
POST - create order
Regra de negocio:
Na criação de uma order
se já houver uma order correspondente ou se preço melhor cadastrada
no banco, essa transição deve ser realizada, os saldos das respectivas
contas deve ser debitado ou creditado e as duas orders são fechadas
---------------
PATCH - atualizar o status de uma order
Regra de negocio:
OPEN >> WAITING, SOLD, CANCEL
WAITING >> OPEN, CANCEL
SOLD >> NOT
CANCEL >> NOT
--------------
GET - GetById
Regra de negocio:
retornar um client mostrando seus saldos
-------------
GET - List orders
Regra de negocio:
Listar todas as orders.

-- PRIMEIRO CASO DE TEST:
-- Tenho tres pessoas vendendo 2 BT uma a 1.500 uma 1.000 e uma a 5.000
-- Eu vou criar uma order de compra (type_order = 1) de 2 BT por 1.500
-- Resultados esperado: Fechar as orders de compra e da do menor valor e debitar e creditar os insumos nas contas dos respectivos clientes

-- f2e2473f-444d-4a94-aa2a-30ae840ca5df	993.533	14	99
-- cdf52d11-7794-4dab-b9ea-4f9ef6f682bd	10.055	11.0	95
-- aab4d348-0c67-4796-b977-9e779b29499c	16.533	4	70

-- resultado das contas envolvidas na transação:
-- aab4d348-0c67-4796-b977-9e779b29499c	15.533	6	70
-- cdf52d11-7794-4dab-b9ea-4f9ef6f682bd	11.055	9.0	95


Testes:
CreateOrder:
Deve falhar caso não encontre um cliente no banco relacionado aquela order
Deve falhar se houver algum problema em conectar no banco
Deve falhar se o tipo da order for menor que 1 
Deve falhar se o tipo da order for maior que 2
Deve falhar se o status da order for menor que 1 
Deve falhar se o status da order for maior que 4
Deve falhar se o preco dar order em BRL for menor ou igual a 0
Deve falhar se o preco dar order em BT for menor ou igual a 0
Deve criar uma order com sucesso e retornar o id dela.

ListOrders:
Deve retorar um array com todas as orders cadastradas

UpdateStatusOrder: 
Deve falhar se o status da order for menor que 1 
Deve falhar se o status da order for maior que 4
Deve falhar caso não encontre a order
Deve falhar se a order já estiver done
Deve falhar se a order já estiver cancela
Deve retornar "status in effect for this order" se o status enviado for o mesmo que já se encontra na order
Deve falhar se uma order estiver waiting e tentarem mudar o status para algo diferente de OPEN ou CANCEL
Deve atualizar com sucesso

GetClientById:
Deve falhar caso não encontre o cliente
Deve retornar o cliente
